import tkinter as tk
from tkinter import messagebox
import speech_recognition as sr
from googletrans import Translator
from gtts import gTTS
import os
import tempfile
import pygame

# Initialize recognizer and translator
recognizer = sr.Recognizer()
translator = Translator()

# Initialize pygame mixer for playing audio
pygame.mixer.init()

# Map spoken language names to their language codes
language_mapping = {
    "tamil": "ta",
    "spanish": "es",
    "french": "fr",
    "german": "de",
    "hindi": "hi",
    "chinese": "zh-cn",
    "japanese": "ja",
    "korean": "ko",
    "italian": "it",
    "arabic": "ar",
    "english": "en",
    "russian": "ru",
}

# Function to play the audio directly in the app using pygame
def play_audio_in_app(file_path):
    pygame.mixer.music.load(file_path)
    pygame.mixer.music.play()

# Function to recognize speech and translate it
def recognize_and_translate():
    try:
        # Use the microphone as source for input
        with sr.Microphone() as source:
            recognizer.adjust_for_ambient_noise(source)

            # Ask the user to speak the target language
            print("Please say the language you want to translate to (e.g., 'Tamil', 'Spanish', 'French'):")
            audio = recognizer.listen(source)
            language_choice = recognizer.recognize_google(audio).lower()

            # Check if the spoken language is supported
            target_lang = language_mapping.get(language_choice)
            if not target_lang:
                messagebox.showerror("Error", f"Sorry, the language '{language_choice}' is not supported.")
                return

            # Ask the user to speak the sentence for translation
            print("Please speak the sentence you want to translate:")
            audio = recognizer.listen(source)

            # Recognize the speech (convert to text)
            text = recognizer.recognize_google(audio)
            print(f"You said: {text}")

            # Translate the text to the preferred language
            translated_text = translator.translate(text, dest=target_lang).text
            print(f"Translated to {language_choice}: {translated_text}")

            # Show the translated text in the GUI
            translated_label.config(text=f"Translated: {translated_text}")

            # Convert the translated text to speech
            tts = gTTS(translated_text, lang=target_lang)

            # Save the speech to a temporary file
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".mp3")
            temp_file.close()  # Ensure the file is closed before playing
            tts.save(temp_file.name)
            print(f"Saved translated speech to {temp_file.name}")

            # Play the audio file directly in the interface using pygame
            play_audio_in_app(temp_file.name)

    except sr.UnknownValueError:
        messagebox.showerror("Error", "Sorry, I could not understand the audio.")
    except sr.RequestError:
        messagebox.showerror("Error", "Couldn't request results. Check your internet connection.")

# Function to start the speech recognition and translation
def start_translation():
    recognize_and_translate()

# Create the main application window
root = tk.Tk()
root.title("Speech Translator")
root.geometry("400x300")

# Add a button to start speech recognition and translation
translate_button = tk.Button(root, text="Start Translation", command=start_translation, font=("Arial", 14))
translate_button.pack(pady=20)

# Label to display the translated text
translated_label = tk.Label(root, text="Translated text will appear here.", font=("Arial", 12))
translated_label.pack(pady=20)

# Run the GUI application
root.mainloop()

# Quit pygame when the application window is closed
pygame.quit()